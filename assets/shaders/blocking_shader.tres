[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://resources/textures/tile.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.1f);
}



"

[resource]
shader = SubResource( 1 )
shader_param/grid_texture = ExtResource( 1 )
