[gd_scene load_steps=6 format=2]

[sub_resource type="Shader" id=1]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="StreamTexture" id=2]
flags = 23
load_path = "res://.import/tile.png-6e3017d9f9497b4575a1b2eeb2ce6d79.s3tc.stex"

[sub_resource type="ShaderMaterial" id=3]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/brightness = 1.0
shader_param/grid_texture = SubResource( 2 )

[sub_resource type="CubeMesh" id=4]
resource_local_to_scene = true
material = SubResource( 3 )

[sub_resource type="BoxShape" id=5]

[node name="Block" type="MeshInstance"]
mesh = SubResource( 4 )
material/0 = null

[node name="StaticBody" type="StaticBody" parent="."]

[node name="CollisionShape" type="CollisionShape" parent="StaticBody"]
shape = SubResource( 5 )
